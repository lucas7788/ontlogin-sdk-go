package sdk

import (
	"encoding/json"
	"github.com/ontology-tech/ontlogin-sdk-go/did"
	"github.com/ontology-tech/ontlogin-sdk-go/did/btc"
	"github.com/ontology-tech/ontlogin-sdk-go/did/starknet"
	"github.com/ontology-tech/ontlogin-sdk-go/modules"
	"github.com/test-go/testify/assert"
	"testing"
)

func TestVerify(t *testing.T) {
	conf := &SDKConfig{
		Chain: []string{"ONT", "ETH"},
		Alg:   []string{"ES256"},
		ServerInfo: &modules.ServerInfo{
			Name:               "taskon_server",
			Icon:               "http://taskon.jpg",
			Url:                "https://taskon.xyz",
			Did:                "did:ont:AXdmdzbyf3WZKQzRtrNQwAR91ZxMUfhXkt",
			VerificationMethod: "",
		},
		VCFilters: map[int][]*modules.VCFilter{},
	}
	processors := make(map[string]did.DidProcessor)
	processors["starknet"] = starknet.NewStarkNetProcessor("https://starknet-goerli.g.alchemy.com/v2/ZDZ4w7toMJ3dKtu1IrE3To-DePJDb2h9")
	processors["btc"] = btc.NewBtcProcessor()
	s, _ := NewOntLoginSdk(conf, processors, func(int) string {
		return ""
	}, func(string) (int, error) {
		return 1, nil
	})
	data := `{"ver":"1.0","type":"ClientResponse","pubkey":"","did":"did:starko:17de689f54abb9f511b0bd5407af91adcac039f4a447c84c29c66b28382a94","nonce":"06af9a3f-9e48-11ee-b603-52540038ea50","proof":{"type":"ES256","verificationMethod":"did:starko:17de689f54abb9f511b0bd5407af91adcac039f4a447c84c29c66b28382a94#key-1","created":1702974268,"value":"0x313039363235303036313630363137373631323734323330373536303138353930343831363135383033383430343230373531363830393630333733333830343137353334323138353637312c31303236303036363732303737333336353836373737363033343938383533353038343730313336313233363839303030333236363139323936393936333735323535353332303932353634"}}`

	data = `{"ver":"1.0","type":"ClientResponse","pubkey":"031261151187135de73e99a04310e62d1fe4be37e9e201712d94c4b4f0dc26fef7","did":"did:btco:bc1qsyaz5q8h7ak45g8vvv7gv0knmgqkydfh2lm4f8","nonce":"e130fa5b-9f0c-11ee-966c-52540038ea50","proof":{"type":"ES256","verificationMethod":"did:btco:bc1qsyaz5q8h7ak45g8vvv7gv0knmgqkydfh2lm4f8#key-1","created":1703058816,"value":"0x1cd0e15165e666cc4dc2c867f561c8fbd1346ce02b9871dca40eed2bee5d33a97f3299ccd474a686b1fc9677da5b76b50225a3187f5c5de5ad5b12379fde7692f8"}}`
	//okex wallet btc
	data = `{"ver":"1.0","type":"ClientResponse","pubkey":"bbb49deb7784e52a985546aab63853a4bd7129c83eb3e336b3c2006a6a0d3be2","did":"did:btco:bc1ph76tn50l365cf28qdylcx837jzvrjh2t6ktxz2h0mcgz8n293szqa0wv7d","nonce":"45f03877-adf0-11ee-be69-52540038ea50","proof":{"type":"ES256","verificationMethod":"did:btco:bc1ph76tn50l365cf28qdylcx837jzvrjh2t6ktxz2h0mcgz8n293szqa0wv7d#key-1","created":1704695797,"value":"0x209d45ac7e40ef649ff2a6b501e2fc7472839822845a0990905560d4fe067634dc47743b42c8e4b89166eb4673dc2df9a2060132ed4bfc414cbf94ff38c4aeb393"}}`
	data = `{"ver":"1.0","type":"ClientResponse","pubkey":"","did":"did:starko:5480978d8b651e542dfa364930d4cef9911b2120b44e8d8b5d5586178ba3075","nonce":"860e9ee1-b119-11ee-b2ac-52540038ea50","proof":{"type":"ES256","verificationMethod":"did:starko:5480978d8b651e542dfa364930d4cef9911b2120b44e8d8b5d5586178ba3075#key-1","created":1705043367,"value":"0x3837343533333732323730373534323736303931303635303536333832333238353633323031383539343638383735313336373139323133363336373133373939353535343934373438382c32343536393132343639323030363935393134323737393137323339353639333939333231353337333635353432393332393231323934373133363335363536393937343730333137343130"}}`
	data = `{"ver":"1.0","type":"ClientResponse","pubkey":"","did":"did:starko:5480978d8b651e542dfa364930d4cef9911b2120b44e8d8b5d5586178ba3075","nonce":"1f4c0bf9-b11e-11ee-830b-52540038ea50","proof":{"type":"ES256","verificationMethod":"did:starko:5480978d8b651e542dfa364930d4cef9911b2120b44e8d8b5d5586178ba3075#key-1","created":1705045342,"value":"0x323135363939363330353234303239313434383035333135323139393232363930313633313231373937383430353835343337333238313035313937323533393436393037353533333930372c32303236333332323637363231353035353634383536353038333638353034313537303231303231353236333933313539343535353439343634383438373337353933313632323833323236"}}`
	//舒佳失败
	data = `{"ver":"1.0","type":"ClientResponse","pubkey":"","did":"did:starko:5480978d8b651e542dfa364930d4cef9911b2120b44e8d8b5d5586178ba3075","nonce":"1304ccf8-b12a-11ee-877b-52540038ea50","proof":{"type":"ES256","verificationMethod":"did:starko:5480978d8b651e542dfa364930d4cef9911b2120b44e8d8b5d5586178ba3075#key-1","created":1705050475,"value":"0x313938303630363830363834363439343934373131313335343438353635353435373935373330313930313039323137353036393531393830303233313036383836343533333538353738372c31333337323030353937323534303934333839373332323139353638343637303235353530363937373631313338363434313030303039313632363734383534353635383135363930373334"}}`
	var res modules.ClientResponse
	err := json.Unmarshal([]byte(data), &res)
	assert.Nil(t, err)
	//res.Proof.Value, _ = hex.DecodeString(res.Proof.Value)
	err = s.ValidateClientResponse(&res)
	//fmt.Println("err:", err.Error())
	assert.Nil(t, err)
}

// {"ver":"1.0","type":"ClientResponse","pubkey":"","did":"did:starko:5480978d8b651e542dfa364930d4cef9911b2120b44e8d8b5d5586178ba3075","nonce":"860e9ee1-b119-11ee-b2ac-52540038ea50","proof":{"type":"ES256","verificationMethod":"did:starko:5480978d8b651e542dfa364930d4cef9911b2120b44e8d8b5d5586178ba3075#key-1","created":1705043367,"value":"0x3837343533333732323730373534323736303931303635303536333832333238353633323031383539343638383735313336373139323133363336373133373939353535343934373438382c32343536393132343639323030363935393134323737393137323339353639333939333231353337333635353432393332393231323934373133363335363536393937343730333137343130"}}
